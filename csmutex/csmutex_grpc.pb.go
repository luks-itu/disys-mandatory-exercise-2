// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package csmutex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CSMutexClient is the client API for CSMutex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSMutexClient interface {
	RequestAccess(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Empty, error)
	ReleaseAccess(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	PerformCriticalAction(ctx context.Context, in *ActionDetails, opts ...grpc.CallOption) (*Empty, error)
}

type cSMutexClient struct {
	cc grpc.ClientConnInterface
}

func NewCSMutexClient(cc grpc.ClientConnInterface) CSMutexClient {
	return &cSMutexClient{cc}
}

func (c *cSMutexClient) RequestAccess(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CSMutex/RequestAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSMutexClient) ReleaseAccess(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CSMutex/ReleaseAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSMutexClient) PerformCriticalAction(ctx context.Context, in *ActionDetails, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CSMutex/PerformCriticalAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSMutexServer is the server API for CSMutex service.
// All implementations must embed UnimplementedCSMutexServer
// for forward compatibility
type CSMutexServer interface {
	RequestAccess(context.Context, *Identifier) (*Empty, error)
	ReleaseAccess(context.Context, *Empty) (*Empty, error)
	PerformCriticalAction(context.Context, *ActionDetails) (*Empty, error)
	mustEmbedUnimplementedCSMutexServer()
}

// UnimplementedCSMutexServer must be embedded to have forward compatible implementations.
type UnimplementedCSMutexServer struct {
}

func (UnimplementedCSMutexServer) RequestAccess(context.Context, *Identifier) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccess not implemented")
}
func (UnimplementedCSMutexServer) ReleaseAccess(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseAccess not implemented")
}
func (UnimplementedCSMutexServer) PerformCriticalAction(context.Context, *ActionDetails) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformCriticalAction not implemented")
}
func (UnimplementedCSMutexServer) mustEmbedUnimplementedCSMutexServer() {}

// UnsafeCSMutexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSMutexServer will
// result in compilation errors.
type UnsafeCSMutexServer interface {
	mustEmbedUnimplementedCSMutexServer()
}

func RegisterCSMutexServer(s grpc.ServiceRegistrar, srv CSMutexServer) {
	s.RegisterService(&CSMutex_ServiceDesc, srv)
}

func _CSMutex_RequestAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSMutexServer).RequestAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSMutex/RequestAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSMutexServer).RequestAccess(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSMutex_ReleaseAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSMutexServer).ReleaseAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSMutex/ReleaseAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSMutexServer).ReleaseAccess(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSMutex_PerformCriticalAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSMutexServer).PerformCriticalAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSMutex/PerformCriticalAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSMutexServer).PerformCriticalAction(ctx, req.(*ActionDetails))
	}
	return interceptor(ctx, in, info, handler)
}

// CSMutex_ServiceDesc is the grpc.ServiceDesc for CSMutex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSMutex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CSMutex",
	HandlerType: (*CSMutexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAccess",
			Handler:    _CSMutex_RequestAccess_Handler,
		},
		{
			MethodName: "ReleaseAccess",
			Handler:    _CSMutex_ReleaseAccess_Handler,
		},
		{
			MethodName: "PerformCriticalAction",
			Handler:    _CSMutex_PerformCriticalAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csmutex.proto",
}
